# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define jobs to be invoked later in a workflow.
jobs:
  # Job 1: Setup Environment and Install All Dependencies
  build:
    docker:
      - image: cimg/python:3.11 # Use a consistent Python version
    steps:
      - checkout
      - run:
          name: "Install UV and Add to Path"
          command: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            uv --version # Verify installation
      - run:
          name: "Create Virtual Env & Install All Dependencies via UV Sync"
          command: |
            # Create venv in the default .venv location
            uv venv --python 3.11
            source .venv/bin/activate
            # Install all dependencies including dev/test extras
            uv sync --all-packages --extra dev --verbose
      - run:
          name: "Verify Installation (Optional)"
          command: |
            source .venv/bin/activate
            uv tree # Check if workspace members and tools are listed
            ruff --version
            pytest --version
            mypy --version
            coverage --version
      - persist_to_workspace:
          # Persist the entire project directory, including the populated .venv
          root: .
          paths:
            - .

  # Job 2: Linting and Formatting Checks
  lint:
    docker:
      - image: cimg/python:3.11
    steps:
      - attach_workspace:
          at: . # Attach the workspace persisted from 'build'
      - run:
          name: "Run Linting and Formatting Checks"
          command: |
            source .venv/bin/activate # Activate the venv from the workspace
            ruff check .

  # Job 3: Unit Tests and Coverage (Fast, No External Dependencies)
  unit_test:
    docker:
      - image: cimg/python:3.11
    steps:
      - attach_workspace:
          at: . # Attach the workspace persisted from 'build'
      - run:
          name: "Activate Venv and Create Test Results Directory"
          command: |
            source .venv/bin/activate
            mkdir -p test-results/unit # Create directory for JUnit XML
      - run:
          name: "Execute Unit Test Suite (src/ tests only)"
          command: |
            source .venv/bin/activate
            # Run only unit tests from src/ directories (fast, isolated tests)
            pytest src/ --cov=src --cov-report=xml --cov-report=term \
                     --junitxml=test-results/unit/junit.xml \
                     --cov-fail-under=85
      - run:
          name: "Run Static Analysis (mypy)"
          command: |
            source .venv/bin/activate
            # Target specific source directories for mypy
            uv add types-requests
            mypy src/ --explicit-package-bases
      - store_test_results:
          path: test-results/unit
      - store_artifacts: # Store coverage reports
          path: coverage.xml
      - store_artifacts:
          path: test-results/unit

  # Job 4: CircleCI Integration Tests (All Tests Except Local Credentials)
  circleci_test:
    docker:
      - image: cimg/python:3.11
    # Environment variables from the 'gmail-client' context will be available here
    steps:
      - attach_workspace:
          at: . # Attach the workspace persisted from 'build'
      - run:
          name: "Activate Venv and Create Test Results Directory"
          command: |
            source .venv/bin/activate
            mkdir -p test-results/circleci # Separate directory for results
      - run:
          name: "Execute All Tests Except Local Credentials"
          command: |
            source .venv/bin/activate
            # Run all tests from src/ and tests/ directories except those requiring local credentials
            # This includes unit tests, integration tests, and e2e tests that work with env vars
            # Coverage tracking enabled since this includes comprehensive unit tests
            pytest src/ tests/ -m "not local_credentials" \
                   --junitxml=test-results/circleci/junit.xml -v \
                   --cov=src --cov-report=term
      - store_test_results:
          path: test-results/circleci
      - store_artifacts:
          path: test-results/circleci

  # Job 5: Integration Tests with Real Credentials (Optional - Branch Restricted)
  integration_test:
    docker:
      - image: cimg/python:3.11
    # Environment variables from the 'gmail-client' context will be available here
    steps:
      - attach_workspace:
          at: . # Attach the workspace persisted from 'build'
      - run:
          name: "Verify Environment Variables"
          command: |
            echo "Checking for required environment variables..."
            if [ -z "$GMAIL_CLIENT_ID" ] || [ -z "$GMAIL_CLIENT_SECRET" ] || [ -z "$GMAIL_REFRESH_TOKEN" ]; then
              echo "WARNING: Missing Gmail environment variables. Integration tests may be skipped."
              echo "Required: GMAIL_CLIENT_ID, GMAIL_CLIENT_SECRET, GMAIL_REFRESH_TOKEN"
            else
              echo "All required environment variables are present."
            fi
      - run:
          name: "Activate Venv and Create Test Results Directory"
          command: |
            source .venv/bin/activate
            mkdir -p test-results/integration # Separate directory for results
      - run:
          name: "Execute Integration Test Suite with Real API Calls"
          command: |
            source .venv/bin/activate
            # Run integration tests that require real Gmail API connectivity
            # These will use environment variables for authentication
            # Note: No coverage tracking for integration tests - they test component interactions
            pytest -m "integration and not local_credentials" \
                   --junitxml=test-results/integration/junit.xml -v \
                   --no-cov
      - store_test_results:
          path: test-results/integration
      - store_artifacts:
          path: test-results/integration

  # Job 6: Report Summary
  report_summary:
    docker:
      - image: cimg/base:stable # Use a basic image for reporting
    steps:
      - attach_workspace:
          at: . # Attach the workspace
      - run:
          name: "Summarize Unit Test Results"
          command: |
            echo "--- Unit Test Summary ---"
            if [ -f test-results/unit/junit.xml ]; then
              echo "Unit test results file found."
              # Extract test count if possible
              if command -v xmllint > /dev/null; then
                tests=$(xmllint --xpath "string(//testsuite/@tests)" test-results/unit/junit.xml 2>/dev/null || echo "N/A")
                failures=$(xmllint --xpath "string(//testsuite/@failures)" test-results/unit/junit.xml 2>/dev/null || echo "N/A")
                echo "Tests: $tests, Failures: $failures"
              fi
            else
              echo "Unit test results file (test-results/unit/junit.xml) not found."
            fi
      - run:
          name: "Summarize CircleCI Test Results"
          command: |
            echo "--- CircleCI Test Summary ---"
            if [ -f test-results/circleci/junit.xml ]; then
              echo "CircleCI test results file found."
            else
              echo "CircleCI test results file not found."
            fi
      - run:
          name: "Summarize Integration Test Results"
          command: |
            echo "--- Integration Test Summary ---"
            if [ -f test-results/integration/junit.xml ]; then
              echo "Integration test results file found."
            else
              echo "Integration test results file not found."
            fi
      - run:
          name: "Display Coverage Info"
          command: |
            echo "--- Coverage Summary ---"
            if [ -f coverage.xml ]; then
               echo "Coverage XML found. Check artifacts for details."
               # Extract overall line rate if xmllint is available
               if command -v xmllint > /dev/null; then
                 coverage_rate=$(xmllint --xpath "string(//coverage/@line-rate)" coverage.xml 2>/dev/null || echo "N/A")
                 echo "Line Coverage Rate: $coverage_rate"
               fi
            else
               echo "Coverage XML not found."
            fi

# Orchestrate jobs using workflows
workflows:
  # Main workflow: Build, Lint, Test (runs on all branches)
  build_and_test:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - main
                - develop
                - kamen-requierd-fixes
                - make-real-deletions
      - lint:
          requires:
            - build
          filters:
            branches:
              ignore:
                - main
                - develop
                - kamen-requierd-fixes
                - make-real-deletions

      - unit_test:
          requires:
            - build
          filters:
            branches:
              ignore:
                - main
                - develop
                - kamen-requierd-fixes
                - make-real-deletions

      - circleci_test:
          requires:
            - unit_test # Run after unit tests pass
          filters:
            branches:
              ignore:
                - main
                - develop
                - kamen-requierd-fixes
                - make-real-deletions

      # Optional: Report summary after core tests
      - report_summary:
          requires:
            - unit_test
            - circleci_test
          filters:
            branches:
              ignore:
                - main
                - develop
                - kamen-requierd-fixes
                - make-real-deletions

  # Enhanced workflow: Full tests with real credentials (main/develop only)
  full_integration:
    jobs:
      - build:
          filters:
            branches:
              only:
                - main
                - develop # Add other branches as needed
                - kamen-requierd-fixes
                - make-real-deletions

      - lint:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - develop
                - kamen-requierd-fixes
                - make-real-deletions

      - unit_test:
          requires:
            - build
          filters:
            branches:
              only:
                - main
                - develop
                - kamen-requierd-fixes
                - make-real-deletions

      - circleci_test:
          requires:
            - unit_test
          filters:
            branches:
              only:
                - main
                - develop
                - kamen-requierd-fixes
                - make-real-deletions

      - integration_test:
          requires:
            - circleci_test # Run after CircleCI tests pass
          context: gmail-client # Context containing Gmail API credentials
          filters:
            branches:
              only:
                - main
                - develop
                - kamen-requierd-fixes
                - make-real-deletions
                
      - report_summary:
          requires:
            - unit_test
            - circleci_test
            - integration_test
          filters:
            branches:
              only:
                - main
                - develop
                - kamen-requierd-fixes
                - make-real-deletions
