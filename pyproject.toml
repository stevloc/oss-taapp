[project]
name = "ta-assignment"
version = "0.1.0"
description = "Template repository for a mail client"
readme = "README.md"
requires-python = ">=3.11"
dependencies = []

[project.optional-dependencies]
dev = [
    "google-api-python-client-stubs>=1.30.0",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.15",
    "mkdocstrings-python>=1.16.12",
    "mypy>=1.17.0",
    "pymdown-extensions>=10.16.1",
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.7",
    "types-requests>=2.32.4.20250611",
]

[tool.uv.workspace]
members = [
  "src/mail_client_api",
  "src/gmail_client_impl",
  "src/message",
  "src/gmail_message_impl",
]

[tool.ruff]
line-length = 130 # high for top level due to tests
target-version = "py311"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  "COM812", # Trailing comma conflicts with formatter
  "D100",  # Ignore missing module-level docstrings for a non-buildable module
  "T201", # Print statements are fine
  "D203", # `incorrect-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible. Ignoring `incorrect-blank-line-before-class`.
  "D213", # `multi-line-summary-first-line` (D212) and `multi-line-summary-second-line` (D213) are incompatible. Ignoring `multi-line-summary-second-line`.
  "B017", # blind exceptions can be ok for tests
  "PT011", # blind exceptions can be ok for tests
  "BLE001", # blind exceptions can be ok for tests
  "S101", # asserts are ok for tests
  "ANN201", # fine to ignore on parent package since it only runs tests
  "D200", # one line docstring nitpick
  "D205", # one line docstring nitpick
  "W293", # unexpected white space checking behaviour in top package
  "PLC0415", # conditional imports happen in tests to speed up progress
  "S603", # valid subprocess calls on tests
  "PLR0912", # tests are complex
  "PLR0915", # tests are complex
  "ANN401", # integartion and e2e tests can depend on untyped external classes
  "C901", # tests are complex
  "S106", # Possible hardcoded password - these are test values
  "ANN001", # Missing type annotation for function argument - common in test mocks
  "ARG002", # Unused method argument - common in test mocks
  "ARG001", # Unused function argument - common in test helpers
  "SLF001", # Private member accessed - testing private methods is legitimate
  "PLR2004", # Magic value used in comparison - tests often use literal values
  "SIM117", # Use single with statement - sometimes nested is clearer in tests
  "PLR1704", # Redefining argument with local name - common in test patches
  "TRY301", # Abstract raise to inner function - not always needed
  "D401", # First line of docstring should be imperative - test docstrings can be descriptive
  "E501", # Line too long - tests can be verbose for clarity
  "TRY300", # Consider moving statement to else block - sometimes clearer as is
  "PLW2901", # Loop variable overwritten - sometimes intentional for processing
]

[tool.mypy]
strict = true
explicit_package_bases = true # Required for src layout
mypy_path = ["src/mail_client_api/src", "src/mail_client_gmail_impl/src", "src/gmail_message_impl/src", "src/message/src"]
ignore_missing_imports = false
warn_unused_ignores = false

# Allow untyped imports for specific modules
[[tool.mypy.overrides]]
module = [
    "google.*",
    "googleapiclient.*",
    "gmail_client_impl.*",
    "message.*",
    "mail_client_api.*",
    "gmail_message_impl.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
pythonpath = [
    ".", 
    "src"
]
testpaths = ["tests", "src/*/tests"]
addopts = ["--cov", "--cov-report=term-missing", "--import-mode=importlib"]
markers = [
    "unit: marks tests as unit tests (fast, isolated)",
    "integration: marks tests as integration tests (medium speed, real dependencies)",
    "e2e: marks tests as end-to-end tests (slow, full system)",
    "circleci: marks tests that can run in CI/CD environments without local credentials",
    "local_credentials: marks tests that require local credentials.json or token.json files",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__main__.py"]

[tool.coverage.report]
fail_under = 85 # Justification: A high threshold ensures most code is tested.
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
